<?php
// $Id$

/** 
 * Project:     Formulize: data management rapid application development
 * File:        formulize_og_sync.module 
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 * 
 */ 

/**
 * @file
 * Syncs Organic Groups with Formulize formulize groups.
 */


/**
 * Implementation of hook_help().
 */
function formulize_og_sync_help($section)
{	
    switch ($section) {
    case 'admin/help#formulize_og_sync':
      $output = '<p>'. t('The Formulize OG Sync module ensures synchronization of OG groups between Drupal and Formulize.') .'</p>';
			$output .= '<ul>';
			$output .= '<li>' . t('Creating new groups in Formulize when groups are created in Organic Groups') . '</li>';
			$output .= '<li>' . t('Updating groups in Formulize when groups are updated in Organic Groups') . '</li>';
			$output .= '<li>' . t('Deleting groups in Formulize when groups are deleted in Organic Groups') . '</li>';
			$output .= '</ul>';
      $output .= '<p>'. t('For more information please refer to the <a href="!1">Formulize web-site</a> which includes project information, documentation and support resources and more.', array('!1' => 'http://freeformsolutions.ca/formulize')) .'</p>';
      return $output;
     case 'admin/modules#description':
      // This description is shown in the listing at admin/modules.
      return t('The Formulize OG Sync module integrates the Organic Groups and subscribers with Formulize groups.');
    }
}

/**
 * Implementation of hook_menu().
 */
function formulize_og_sync_menu() {
  $items = array();
	
	$items['admin/settings/formulize/og'] = array(
    'title' => 'Formulize & OG Integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formulize_og_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
		'weight' => -1,
    'description' => 'Syncing between Organic Groups and Formulize groups.',
    'type' => MENU_NORMAL_ITEM,
  );
	
		$items['admin/settings/formulize/group-multiplier'] = array(
    'title' => 'Formulize group multiplier',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formulize_og_multiplier'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
		'weight' => 0,
    'description' => 'Settings for complex Organic groups and Formulize group integration (FOR ACTUA ONLY!).',
    'type' => MENU_NORMAL_ITEM,
  );
	
	 return $items;
}

/**
 * Menu callback to load settings form.
 */
function formulize_og_settings() {
  // content types
  $is_configured = count(og_get_types('group'));
  if (!$is_configured) {
    form_set_error('formulize_og_settings', t('You must designate at least one content type to act as a group node. <a href="!create">Create new content type</a> if needed.', array('!create' => url('admin/content/types/add', array('query' => drupal_get_destination())))));
  }
	
	$options = array();
  foreach (node_get_types() as $type) {
    $usage = variable_get('og_content_type_usage_'. $type->type, 'omitted');

		if ($usage == 'group') {
    	$options[$type->type] = $type->name;
		}
  }
	
	$form['formulize_og_settings'] = array(
  	'#type' => 'radios',
    '#title' => t('Select the group node that you want to sync with Formulize'),
    '#required' => FALSE,
    '#default_value' => variable_get('formulize_og_group_node_type', NULL),
		'#description' => t('Select from the given list of Organic groups which one will synchronize with Formulize groups.'),
    '#weight' => 0,
    '#options' => $options
  );
  $form['submit'] = array(
		'#type' => 'submit', 
		'#value' => t('Select'),
		'#weight' => '5'
	);

  return $form;
}

/**
 * Form submissions handler
 */
function formulize_og_settings_submit($form, &$form_state) {
	
	$form_values = $form_state['values'];

	if ($form_values['submit']) {
		variable_set('formulize_og_group_node_type', $form_values['formulize_og_settings']);
		$message = $form_values['formulize_og_settings'] . t(' set as Formulize group.');
		drupal_set_message($message);
	}
}

/**
 * Get list of OG groups
 */
function _formulize_get_og_list() {}

/**
 * Menu callback for admin/formulize/og/group-multiplier
 */
function formulize_og_multiplier() {
	
  $form['formulize_group']  = array(
    '#type' => 'checkboxes',
    '#title' => t('If you are Actua, choose the groups where you will need special Director and Instructor groups in Formulize'),
    '#description' => t('If you are Actua, this version of the module will include two multiplier groups - Director and Instructor, as per Actua\'s needs. Your choices here will mean there will be three groups in Formulize. E.g. A "Summer Science Camp" group chosen here will create a "Summer Science Camp Directors" group and a "Summer Science Camp Instructor" group as well.'),
		'#default_value' => _formulize_get_multiplier_group_list(),
		'#options' => _formulize_get_group_list()
  );

	$form['submit'] = array(
		'#type' => 'submit', 
		'#value' => t('Set Formulize multiples'),
		'#weight' => '5'
	);
	//dsm($form);
	
	return $form;
}

/**
 * Get existing list of multiplier group nodes
 */

function _formulize_get_multiplier_group_list() {
	
	$result = db_query("SELECT DISTINCT(nid) FROM {formulize_og_sync} fos");
	
	$multiplier_group_node_list = array();
	while($row = db_fetch_object($result)) {
		$multiplier_group_node_list[$row->nid] = $row->nid;
	}
	
	return $multiplier_group_node_list;
}

/**
 * Get list of group nodes
 * We want to assign some group nodes as "multipliers" for advanced permissions
 */
function _formulize_get_group_list() {
	
	$formulize_og_group_node_type = variable_get('formulize_og_group_node_type', NULL);
	
	$result = db_query("SELECT * FROM {node} n where n.type = '%s'", $formulize_og_group_node_type);
	
	$group_node_list = array();
	while($row = db_fetch_object($result)) {
		$group_node_list[$row->nid] = $row->title;
	}
	
	if(count($group_node_list) == 0) {
		$message = t('No group nodes found for !group. You need to !create.', array('!group' => $formulize_og_group_node_type, '!create' => l(t('create new content first'),'node/add/' . $formulize_og_group_node_type)));
		drupal_set_message($message);
	}
	
	return $group_node_list;
}

/**
 * Group Multiplier Form validation
 */
function formulize_og_multiplier_validate($form, &$form_state) {
  if ($form_state['values']['nid'] == '') {
    //form_set_error('', t('Do something.'));
  }
}

/**
 * Group Multiplier Form submissions handler
 * 
 * The extra Formulize groups are hard-wired, and there is no checking if the Formulize group already exists.
 * Next to do is also create the Formulize groups based on the translation table.
 */
function formulize_og_multiplier_submit($form, &$form_state) {
	$form_values = $form_state['values'];
	
	if ($form_values['submit']) {
		foreach($form_values['formulize_group'] as $key => $value) {
			if ($value != 0) {
			  $node = node_load(array('nid' => $key));
 				$name  = trim( $node->title );
				$description = trim( $node->og_description );

				_formulize_insert_group_multipliers($key,$name,$description);

				$message = $name . t(' set as Formulize group.');
				drupal_set_message($message);
			}
			elseif ($key && $value == 0) {
				//TODO: if we get a blank key then we need to check if we need to remove the duplicates in Formulize
			}
		}
	}
}

/**
 * Implementation of hook_form_alter().
 */
function formulize_og_sync_form_alter(&$form, $form_state, $form_id) {
	 if($form_id == 'formulize_sync') {
		
		$form['sync_groups'] = array(
		'#type' => 'checkbox',
		'#title' => t('Create groups'),
		'#default_value' => 0,
		'#weight' => '1',
		'#description' => t('Check this when you are ready to create Formulize groups for every existing Drupal Organic Group. After the initial manual sync, for every change to your Drupal group, the changes will automatically propagate to Formulize.'),
		);
		
		$form['#submit'] = array ('formulize_og_sync_groups_submit');
	 }
}

/*
 * Override formulize_sync_submit()
 */

function formulize_og_sync_groups_submit($form, &$form_state) {
	$form_values = $form_state['values'];
	// take the submission and do the syncing
	// check for conditions of syncing users
	if ($form_values['submit']) {
		global $user;

// Access control is already set in menu callback, no need to check again here
/*		if($user->uid!=1) {
			drupal_set_message(t('Create users/groups can only be run by the first user.'),'error');
			return;
		}
		*/
		if($form_values['sync_users']) {
			_formulize_sync_users( );
			drupal_set_message(t('Users have been synced with Formulize.'));
		}
		if($form_values['sync_groups']) {
			_formulize_og_sync_groups( );
			drupal_set_message(t('Organic groups have been synced with Formulize.'));
		}
	}
}

/**
 * Implementation of hook_nodeapi().
 *
 * Listen for changes to OG
 * hook_nodeapi().
 */
function formulize_og_sync_nodeapi(&$node, $op, $teaser, $page) {

	// only run if OG is enabled
  // check if the node if of type og
  if ( ! og_is_group_type( $node->type ) ) {
      return;
  }

		$name  = trim( $node->title );
		$description = trim( $node->og_description );

		switch ($op) {
		case 'insert': // $node object should be available
			// get nid and create Fz group if one with same id doesn't already exist
			drupal_set_message(t('A corresponding Formulize group has been created'));
			_formulize_insert_group($node->nid, $name, $description);

			//drupal_set_message(t('sync_nodeapi::insert'));
			//drupal_set_message($name . t(' inserted.'));
			break;
		case 'update':
			_formulize_update_group($node->nid, $name, $description);

			//drupal_set_message(t('sync_nodeapi::update'));
			//drupal_set_message($name . t(' updated.'));
			break;
		case 'delete':
			_formulize_delete_group($node);

			//drupal_set_message(t('sync_nodeapi::delete'));
			//drupal_set_message($name . t(' deleted.'));
			break;
		case 'delete revision':
			//drupal_set_message(t('sync_nodeapi::delete revision'));
			break;
  	}
}

/**
 * Implementation of hook_og().
 * 
 * When a user is added or removed we do the same to the equivalent group in Formulize.
 */
function formulize_og_sync_og($op, $gid, $uid, $args) {
  switch ($op) {
    case 'user insert':
			if($args['is_active'])
			{
				//drupal_set_message(t('sync_og::user insert:') . $gid . ':' . $uid);
				_formulize_add_user_to_group($gid,$uid);
			}
      break;
    case 'user delete':
			//drupal_set_message(t('sync_og::user delete:') . $gid . ':' . $uid);
			_formulize_remove_user_from_group($gid,$uid);
      break;
    case 'user request':
      break;
    case 'user approve':
			//drupal_set_message(t('sync_og::user approve:') . $gid . ':' . $uid);
			_formulize_add_user_to_group($gid,$uid);
      break;
    case 'admin create':
    case 'admin new':
    case 'user broadcast':
			// not sure if we need to do anything with these triggers
      break;
  }
}

/**
 * Implementatation of hook_user()
 * 
 * Listen for user changes, additions, deletes and synchronize with Formulize database
 */

function formulize_og_sync_user($op, &$edit, &$account, $category) {
	switch($op) {
		case 'after_update': // if user is modified
      // see if user profile has changed and update
			break;
		case 'insert': //if it's a new user being created
      // check the $edit for uid
						// check if user joined a group and add to Fz group if true
			if (isset($edit['og_register'])) { // if og_register is set then we know 
				foreach (array_keys(array_filter($edit['og_register'])) as $gid) {
				}
			}
			break;        
		case 'delete':
		// delete or de-activate on Fz
		break;
	}
}

/**
 * Sync Drupal groups with XOOPS
 */
function _formulize_og_sync_groups( )
{
	$db = _formulize_get_connection();

	$member_handler =& xoops_gethandler('member');

	$results = db_query("SELECT nid, og_description FROM {og} ORDER BY nid");
	while($result = db_fetch_array($results)) {
	        $node = node_load(array('nid' => $result['nid']));
		$name  = trim( $node->title );
		$description = trim( $node->og_description );

		$xoops_group = _formulize_insert_group($result['nid'],$name,$description);

		// add users to group
		$results_member = db_query("SELECT uid FROM {og_uid} WHERE nid=%d ORDER BY uid",$result['nid']);
		while($result_member = db_fetch_array($results_member)) {
			$member_handler->addUserToGroup($xoops_group->getVar('groupid'),$result_member['uid']);
		}
	}
}

/**
 * Insert a Drupal group into XOOPS
 */
function _formulize_insert_group($nid,$name,$description,$formulize_group_kind='')
{
	$db = _formulize_get_connection();

	$member_handler =& xoops_gethandler('member');

  $xoops_group = $member_handler->createGroup();
	$xoops_group->setVar('name',_formulize_convert_group_name($name,$formulize_group_kind));
	$xoops_group->setVar('description',$description);

	$member_handler->insertGroup($xoops_group);

	db_query("INSERT INTO {formulize_og_sync} (nid, formulize_groupid, formulize_group_kind) VALUES (%d, %d, '%s')", $nid, $xoops_group->getVar('groupid'), $formulize_group_kind);

	return $xoops_group;
}

function _formulize_get_multipliers()
{
	// 8 is a constant of the Directors nid
	// 123 is a constant of the Instructors nid
	$multipliers = array(array('Directors',8),array('Instructors',123));
	
	return $multipliers;
}

/**
 * Insert multiple Drupal groups into XOOPS
 */
function _formulize_insert_group_multipliers($nid,$name,$description)
{
	$db = _formulize_get_connection();

	$member_handler =& xoops_gethandler('member');

	$multipliers = _formulize_get_multipliers();

	foreach($multipliers as $multiplier)
	{
		$xoops_group = _formulize_insert_group($nid,$name,$description,$multiplier[0]);

		// add users to group
		$results = db_query("SELECT og1.uid FROM {og_uid} as og1 JOIN {og_uid} og2 ON og2.uid=og1.uid WHERE og1.nid=%d AND og2.nid=%d ORDER BY og1.uid",$nid,$multiplier[1]);
		while($result = db_fetch_array($results)) {
			$member_handler->addUserToGroup($xoops_group->getVar('groupid'),$result['uid']);
		}
	}
}

/**
 * When a Drupal OG group changes, update in XOOPS
 */
function _formulize_update_group($nid,$name,$description)
{
	$db = _formulize_get_connection();

	$member_handler =& xoops_gethandler('member');

	// update multipliers
	$results = db_query("SELECT * FROM {formulize_og_sync} WHERE nid=%d AND NOT formulize_group_kind='%s'",$nid,'');
	while($result = db_fetch_array($results)) {
		$xoops_group = $member_handler->getGroup($result['formulize_groupid']);
		$xoops_group->setVar('name',_formulize_convert_group_name($name,$result['formulize_group_kind']));
		$xoops_group->setVar('description',$description);

		$member_handler->insertGroup($xoops_group);
	}

	$result = db_fetch_array(db_query("SELECT * FROM {formulize_og_sync} WHERE nid=%d AND formulize_group_kind='%s'",$nid,''));
  $xoops_group = $member_handler->getGroup($result['formulize_groupid']);
	$xoops_group->setVar('name',_formulize_convert_group_name($name,''));
	$xoops_group->setVar('description',$description);

	$member_handler->insertGroup($xoops_group);
}

/**
 * When a Drupal OG group is removed, delete in XOOPS
 */
function _formulize_delete_group($og_group) {
	//TODO: delete duplicate groups when removing main group and remove entries from formulize_og_sync
	
	$db = _formulize_get_connection();

	$member_handler =& xoops_gethandler('member');

	// delete multipliers
	$results = db_query("SELECT * FROM {formulize_og_sync} WHERE nid=%d AND NOT formulize_group_kind='%s'",$og_group->nid,'');
	while($result = db_fetch_array($results)) {
		$xoops_group = $member_handler->getGroup($result['formulize_groupid']);
		$xoops_group->setVar('name',_formulize_convert_group_name($name,$result['formulize_group_kind']));
		$xoops_group->setVar('description',$description);

		$member_handler->deleteGroup( $xoops_group );
	}

	$result = db_fetch_array(db_query("SELECT * FROM {formulize_og_sync} WHERE nid=%d AND formulize_group_kind='%s'",$og_group->nid,''));
  $xoops_group = $member_handler->getGroup($result['formulize_groupid']);

	$member_handler->deleteGroup( $xoops_group );
	
}


/**
 * Internal function to add a user to Formulize group when added to OG group
 * 
 * @param Integer $nid
 * The node ID.
 * @param Integer $uid
 * The user ID.
 */
function _formulize_add_user_to_group($nid,$uid)
{
	$db = _formulize_get_connection();

	$member_handler =& xoops_gethandler('member');

	$result = db_fetch_array(db_query("SELECT * FROM {formulize_og_sync} WHERE nid=%d AND formulize_group_kind='%s'",$nid,''));
	$member_handler->addUserToGroup($result['formulize_groupid'],$uid);

	// multipliers
	$multipliers = _formulize_get_multipliers();
	foreach($multipliers as $multiplier)
	{
		// add users to group
		//$result = db_fetch_array(db_query("SELECT * FROM {og_uid} WHERE uid=%d AND nid=%d",$uid,$multiplier[1]));
		$result = db_fetch_array(db_query("SELECT og2.* FROM {og_uid} as og1 JOIN {og_uid} og2 ON og2.uid=og1.uid WHERE og1.nid=%d AND og2.nid=%d AND og2.uid=%d",$nid,$multiplier[1],$uid));
		//drupal_set_message(sprintf("SELECT og2.* FROM {og_uid} as og1 JOIN {og_uid} og2 ON og2.uid=og1.uid WHERE og1.nid=%d AND og2.nid=%d AND og2.uid=%d",$nid,$multiplier[1],$uid));
		if($result) {
			$result = db_fetch_array(db_query("SELECT * FROM {formulize_og_sync} WHERE nid=%d AND formulize_group_kind='%s'",$nid,$multiplier[0]));
			//drupal_set_message(sprintf("SELECT * FROM {formulize_og_sync} WHERE nid=%d AND formulize_group_kind='%s'",$nid,$multiplier[0]));
			if($result) {
				$member_handler->addUserToGroup($result['formulize_groupid'],$uid);
			}
		}
	}
}

/**
 * Internal function to remove a Formulize group user when removed from OG group
 * 
 * @param Integer $nid
 * The node ID.
 * @param Integer $uid
 * The user ID.
 */
function _formulize_remove_user_from_group($nid,$uid)
{
	$db = _formulize_get_connection();

	$member_handler =& xoops_gethandler('member');

	$user_ids=array($uid);

	$result = db_fetch_array(db_query("SELECT * FROM {formulize_og_sync} WHERE nid=%d AND formulize_group_kind='%s'",$nid,''));
	$member_handler->removeUsersFromGroup($result['formulize_groupid'],$user_ids);

	// multipliers
	$multipliers = _formulize_get_multipliers();
	foreach($multipliers as $multiplier)
	{
		// add users to group
		//$result = db_fetch_array(db_query("SELECT * FROM {og_uid} WHERE uid=%d AND nid=%d",$uid,$multiplier[1]));
		$result = db_fetch_array(db_query("SELECT og2.* FROM {og_uid} as og1 JOIN {og_uid} og2 ON og2.uid=og1.uid WHERE og1.nid=%d AND og2.nid=%d AND og2.uid=%d",$nid,$multiplier[1],$uid));
		if($result) {
			$result = db_fetch_array(db_query("SELECT * FROM {formulize_og_sync} WHERE nid=%d AND formulize_group_kind='%s'",$nid,$multiplier[0]));
			if($result) {
				$member_handler->removeUsersFromGroup($result['formulize_groupid'],$user_ids);
			}
		}
	}
}

/**
 * Convert a Drupal group name into XOOPS
 */
function _formulize_convert_group_name($name,$formulize_group_kind)
{
	// XOOPS groups.name is varchar(50)
	$name_len = strlen($name);
	$kind_len = strlen($formulize_group_kind);
	$name_ouput = $name;

	//-3 constant is space for ...
	if($name_len+$kind_len+1 > 50) {
		$name_ouput = substr($name_ouput,0,50-$kind_len-3);
		$name_ouput .= '...';
	}
	else
		$name_ouput .= ' ';

	$name_ouput .= $formulize_group_kind;

	return $name_ouput;
}
